type Query {
    dialog(id: String!): Dialog!
    dialogs: [Dialog!]!
    users: [User!]!
}

type Mutation {
    createDialog(name: String!): Dialog!
    createRole(name: String!, dialogId: String!): Role!
    updateRole(id: String!, name: String, dialogId: String): Role!
    deleteRole(id: String!): Boolean!


    createLine(text: String!, roleId: String!, dialogId: String!, number: Int!): Line!

    updateLine(id: String!, text: String, roleId: String): Line!


    deleteLine(id: String!): Boolean!
    signup(email: String!, password: String!, name: String!): AuthPayload
    updateUser(email: String!, newPassword: String!): Boolean
    login(email: String!, password: String!): AuthPayload
}

type Dialog {
    id: ID!
    name: String!
    roles: [Role!]
    lines: [Line!]!
    user: User!
}

type Role {
    id: ID!
    name: String!
    dialog: Dialog
}

type Line {
    id: ID!
    text: String!
    number: Int!
    role: Role!
    dialog: Dialog!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  dialogs: [Dialog!]!
}

type AuthPayload {
    token: String
    user: User
}

input RoleInput {
    name: String
    dialog: String
}

input LineInput {
    text: String!
    guess: String!
    role: RoleInput!
    number: Int!
}
